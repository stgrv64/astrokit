arguments.c:    nb_puls = GPIO_ACCELERATION_2( GPIO_CLK_ALT, GPIO_CLK_AZI, f_deb, f_fin, delai, suivi->l_NANO_MOINS) ;
arguments.c:     CALCUL_VITESSES  ( lieu, astre, suivi) ; // TODO : verifier suivi->SUIVI_EQUATORIAL avant
arguments.c:    suivi->l_NANO_MOINS = atol( argv[2]) ;
arguments.c:    CALCUL_VITESSES( lieu, astre, suivi) ; // TODO : verifier suivi->SUIVI_EQUATORIAL avant
arguments.c:    CALCUL_VITESSES( lieu, astre, suivi) ; // TODO : verifier suivi->SUIVI_EQUATORIAL avant
arguments.c:    suivi->alarme=atoi(argv[2]) ;
arguments.c:    printf("ARGUMENTS_GERER : alarm = %d\n",suivi->alarme) ;
arguments.c:     suivi->Th = periode ;
arguments.c:     suivi->Ta = periode ;
astro.c:    TRACE("Abandon thread numero %d de p_thread_t = %d",i,(int)suivi->p_threads_id[i]) ;
astro.c:    pthread_cancel(suivi->p_threads_id[i]);
astro.c:  pthread_cancel( suivi->p_suivi_azi ) ;
astro.c:  pthread_cancel( suivi->p_suivi_alt ) ;
astro.c:  pthread_cancel( suivi->p_menu ) ;
astro.c:  pthread_cancel( suivi->p_suivi_calculs ) ;
astro.c:  pthread_cancel( suivi->p_suivi_infrarouge ) ;
astro.c:  pthread_cancel( suivi->p_suivi_capteurs ) ;
astro.c:   switch ( suivi->menu ) {
astro.c:     case MENU_MANUEL_0   : suivi->SUIVI_MANUEL     = 1 ; break ;
astro.c:     case MENU_MANUEL_1   : suivi->SUIVI_MANUEL     = 1 ; break ;
astro.c:     case MENU_AZIMUTAL   : suivi->SUIVI_EQUATORIAL = 0 ; break ;
astro.c:     case MENU_EQUATORIAL : suivi->SUIVI_EQUATORIAL = 1 ; break ;
astro.c:     case MENU_GOTO       : suivi->SUIVI_GOTO       = 1 ; break ;
astro.c:  suivi->menu_old = suivi->menu ;
astro.c:  if ( ! strcmp( clavier->mot, "o" ))         { suivi->menu = MENU_MANUEL_0 ; strcpy(clavier->mot,"") ; }
astro.c:  if ( ! strcmp( clavier->mot, "e" ))         { suivi->menu = MENU_MANUEL_0 ; strcpy(clavier->mot,"") ; }
astro.c:  if ( ! strcmp( clavier->mot, "s" ))         { suivi->menu = MENU_MANUEL_0 ; strcpy(clavier->mot,"") ; }
astro.c:  if ( ! strcmp( clavier->mot, "n" ))         { suivi->menu = MENU_MANUEL_0 ; strcpy(clavier->mot,"") ; }
astro.c:  if ( ! strcmp( clavier->mot, "reset" ))     { suivi->menu = MENU_MANUEL_0 ; strcpy(clavier->mot,"") ; }
astro.c:  if ( ! strcmp( clavier->mot, "stop" ))      {  suivi->SUIVI_VOUTE = 0 ; strcpy(clavier->mot,"") ; }
astro.c:  if ( ! strcmp( clavier->mot, "play" ))      {  suivi->SUIVI_VOUTE = 1 ; strcpy(clavier->mot,"") ; }
astro.c:    if (      suivi->menu == MENU_AZIMUTAL )   { suivi->menu = MENU_EQUATORIAL ; strcpy(clavier->mot,"") ; }
astro.c:    else if ( suivi->menu == MENU_EQUATORIAL ) { suivi->menu = MENU_AZIMUTAL ; strcpy(clavier->mot,"") ; }
astro.c:  if ( ! strcmp( clavier->mot, "reseau_up"))  {  suivi->menu = MENU_RESEAU_UP ; strcpy(clavier->mot,"") ; }
astro.c:  if ( ! strcmp( clavier->mot, "screen"))     {  suivi->menu = MENU_RESEAU_UP ; strcpy(clavier->mot,"") ; }  
astro.c:      suivi->menu_old = suivi->menu ;
astro.c:      suivi->menu     = atoi( clavier->nombre ) ; 
astro.c:      suivi->SUIVI_ALIGNEMENT = 1 ;
astro.c:      //suivi->menu = MENU_AZIMUTAL ;
astro.c:      // TRACE("pas_azi = %ld pas_alt = %ld acc_azi = %f acc_alt = %f", suivi->pas_azi, suivi->pas_alt, suivi->acc_azi , suivi->acc_alt) ;
astro.c:          if ( suivi->DONNEES_CAPTEURS ) { astre->a = suivi->pitch ;astre->h = suivi->heading ; }
astro.c:          suivi->menu_old = suivi->menu ;
astro.c:          suivi->menu = MENU_AZIMUTAL ;
astro.c:  if ( suivi->DONNEES_RAQUETTE )   GPIO_KEYBOARD_RAQUETTE_READ( gpio_key_l, gpio_key_c, raquette, suivi) ;
astro.c:  if ( suivi->DONNEES_INFRAROUGE ) IR_KEYBOARD_RAQUETTE_READ( suivi) ;
astro.c:  if ( suivi->reset ) {
astro.c:    pthread_mutex_lock(& suivi->mutex_azi );
astro.c:    pthread_mutex_lock(& suivi->mutex_alt );
astro.c:    if ( suivi->Sh != 0 ) suivi->pas_alt = suivi->Sh ; else suivi->pas_alt = 1 ;
astro.c:    if ( suivi->Sa != 0 ) suivi->pas_azi = suivi->Sa ; else suivi->pas_azi = 1 ;
astro.c:    suivi->acc_azi = 1.0 ;
astro.c:    if ( suivi->SUIVI_EQUATORIAL )  suivi->acc_alt = 0.0 ;
astro.c:    else                            suivi->acc_alt = 1.0 ;
astro.c:    suivi->reset = 0 ;
astro.c:           suivi->Sh , suivi->Sa, suivi->pas_azi, suivi->pas_alt, suivi->acc_azi , suivi->acc_alt) ;
astro.c:           suivi->Sh , suivi->Sa, suivi->pas_azi, suivi->pas_alt, suivi->acc_azi , suivi->acc_alt) ;
astro.c:    pthread_mutex_unlock(& suivi->mutex_azi );
astro.c:    pthread_mutex_unlock(& suivi->mutex_alt );
astro.c:  if ( suivi->pas_nord || suivi->pas_sud || suivi->pas_est || suivi->pas_ouest ) flag = 1 ;
astro.c:    pthread_mutex_lock(& suivi->mutex_azi );
astro.c:    pthread_mutex_lock(& suivi->mutex_alt );
astro.c:    if ( suivi->pas_nord )  suivi->pas_alt++ ; if ( suivi->pas_alt == 0 ) suivi->pas_alt = 1 ;
astro.c:    if ( suivi->pas_sud )   suivi->pas_alt-- ; if ( suivi->pas_alt == 0 ) suivi->pas_alt = -1 ;
astro.c:    if ( suivi->pas_ouest ) suivi->pas_azi++;  if ( suivi->pas_azi == 0 ) suivi->pas_azi = 1 ;
astro.c:    if ( suivi->pas_est )   suivi->pas_azi-- ; if ( suivi->pas_azi == 0 ) suivi->pas_azi = -1 ;
astro.c:    if ( suivi->pas_nord  || suivi->pas_sud ) {
astro.c:      if ( abs(suivi->pas_alt) <= 2) suivi->acc_alt = suivi->pas_alt  ;
astro.c:      else                           suivi->acc_alt = suivi->pas_alt * ALT_ACC ;
astro.c:    if ( suivi->pas_ouest || suivi->pas_est ) {
astro.c:      if ( abs(suivi->pas_azi) <= 2) suivi->acc_azi = suivi->pas_azi ;
astro.c:      else                           suivi->acc_azi = suivi->pas_azi * AZI_ACC ;
astro.c:    suivi->pas_est     = 0 ;
astro.c:    suivi->pas_ouest   = 0 ; 
astro.c:    suivi->pas_nord    = 0 ;
astro.c:    suivi->pas_sud     = 0 ;
astro.c:    suivi->reset = 0 ;
astro.c:    TRACE("pas_azi = %ld pas_alt = %ld acc_azi = %f acc_alt = %f", suivi->pas_azi, suivi->pas_alt, suivi->acc_azi , suivi->acc_alt) ;
astro.c:      LOG("pas_azi = %ld pas_alt = %ld acc_azi = %f acc_alt = %f", suivi->pas_azi, suivi->pas_alt, suivi->acc_azi , suivi->acc_alt) ;
astro.c:    pthread_mutex_unlock(& suivi->mutex_azi );
astro.c:    pthread_mutex_unlock(& suivi->mutex_alt );
astro.c:  if ( suivi->pas_forward ) {
astro.c:    pthread_mutex_lock(& suivi->mutex_azi );
astro.c:    pthread_mutex_lock(& suivi->mutex_alt );
astro.c:    suivi->acc_azi *= ALTAZ_FORWARD ;
astro.c:    suivi->acc_alt *= ALTAZ_FORWARD ; 
astro.c:    pthread_mutex_unlock(& suivi->mutex_azi );
astro.c:    pthread_mutex_unlock(& suivi->mutex_alt );
astro.c:    TRACE("acc*ALTAZ_FORWARD %.4f acc_azi %.4f acc_alt %.4f", ALTAZ_FORWARD, suivi->acc_azi, suivi->acc_alt ) ;
astro.c:      LOG("acc*ALTAZ_FORWARD %.4f acc_azi %.4f acc_alt %.4f", ALTAZ_FORWARD, suivi->acc_azi, suivi->acc_alt ) ;
astro.c:    suivi->pas_forward = 0 ;
astro.c:  if ( suivi->pas_rewind ) {
astro.c:    pthread_mutex_lock(& suivi->mutex_azi );
astro.c:    pthread_mutex_lock(& suivi->mutex_alt );
astro.c:    suivi->acc_azi /= ALTAZ_REWIND ;
astro.c:    suivi->acc_alt /= ALTAZ_REWIND ; 
astro.c:    pthread_mutex_unlock(& suivi->mutex_azi );
astro.c:    pthread_mutex_unlock(& suivi->mutex_alt );
astro.c:    TRACE("acc/ALTAZ_REWIND %.4f acc_azi %.4f acc_alt %.4f ", ALTAZ_REWIND, suivi->acc_azi, suivi->acc_alt ) ;
astro.c:      LOG("acc/ALTAZ_REWIND %.4f acc_azi %.4f acc_alt %.4f ", ALTAZ_REWIND, suivi->acc_azi, suivi->acc_alt ) ;
astro.c:    suivi->pas_rewind  = 0 ;
astro.c:  if ( suivi->pas_forward_fast ) {
astro.c:    pthread_mutex_lock(& suivi->mutex_azi );
astro.c:    pthread_mutex_lock(& suivi->mutex_alt );
astro.c:    suivi->acc_azi *= ALTAZ_FORWARD_FAST ;          
astro.c:    suivi->acc_alt *= ALTAZ_FORWARD_FAST ; 
astro.c:    pthread_mutex_unlock(& suivi->mutex_azi );
astro.c:    pthread_mutex_unlock(& suivi->mutex_alt );
astro.c:    TRACE("acc*ALTAZ_FORWARD_FAST %.4f acc_azi %.4f acc_alt %.4f", ALTAZ_FORWARD_FAST, suivi->acc_azi, suivi->acc_alt ) ;
astro.c:      LOG("acc*ALTAZ_FORWARD_FAST %.4f acc_azi %.4f acc_alt %.4f", ALTAZ_FORWARD_FAST, suivi->acc_azi, suivi->acc_alt ) ;
astro.c:    suivi->pas_forward_fast = 0 ;
astro.c:  if ( suivi->pas_rewind_fast ) {
astro.c:    pthread_mutex_lock(& suivi->mutex_azi );   
astro.c:    pthread_mutex_lock(& suivi->mutex_alt );
astro.c:    suivi->acc_azi /= ALTAZ_REWIND_FAST ;
astro.c:    suivi->acc_alt /= ALTAZ_REWIND_FAST ; 
astro.c:    pthread_mutex_unlock(& suivi->mutex_azi );
astro.c:    pthread_mutex_unlock(& suivi->mutex_alt );
astro.c:    TRACE("acc/ALTAZ_REWIND_FAST  %.4f acc_azi %.4f acc_alt %.4f ", ALTAZ_REWIND_FAST, suivi->acc_azi, suivi->acc_alt ) ;
astro.c:      LOG("acc/ALTAZ_REWIND_FAST  %.4f acc_azi %.4f acc_alt %.4f ", ALTAZ_REWIND_FAST, suivi->acc_azi, suivi->acc_alt ) ;
astro.c:    suivi->pas_rewind_fast  = 0 ;
astro.c:    pthread_mutex_lock( & suivi->mutex_cal );
astro.c:    pthread_mutex_unlock( & suivi->mutex_cal );
astro.c:  suivi->pas_azi_old = suivi->pas_azi ;
astro.c:  suivi->pas_alt_old = suivi->pas_alt ;
astro.c:  if ( suivi->DONNEES_RAQUETTE )   GPIO_KEYBOARD_RAQUETTE_READ( gpio_key_l, gpio_key_c, raquette, suivi) ;
astro.c:  if ( suivi->DONNEES_INFRAROUGE ) IR_KEYBOARD_RAQUETTE_READ( suivi) ;
astro.c:  if ( suivi->reset ) {
astro.c:    suivi->pas_alt = 0 ;
astro.c:    suivi->pas_azi = 0 ;
astro.c:    suivi->d_appui_raq_azi = 0 ;
astro.c:    suivi->d_appui_raq_alt = 0 ; 
astro.c:    suivi->Ta = MAIN_TA_RESET ;
astro.c:    suivi->Th = MAIN_TH_RESET ;
astro.c:    suivi->Fa = MAIN_FA_RESET ;
astro.c:    suivi->Fh = MAIN_FH_RESET ;
astro.c:    suivi->reset = 0 ;
astro.c:  while( suivi->pas_ouest || suivi->pas_est || suivi->pas_sud || suivi->pas_nord || suivi->pas_acc_plus || suivi->pas_acc_moins )
astro.c:    if ( suivi->Ta == MAIN_TA_RESET && suivi->Th == MAIN_TH_RESET ) {
astro.c:      suivi->Ta = MAIN_TA_TRANSITOIRE ;
astro.c:      suivi->Th = MAIN_TH_TRANSITOIRE ;
astro.c:      suivi->Fa = MAIN_FA_TRANSITOIRE ;
astro.c:      suivi->Fh = MAIN_FH_TRANSITOIRE ;
astro.c:    if ( ! azi )  if ( suivi->pas_ouest || suivi->pas_est || suivi->pas_acc_moins || suivi->pas_acc_plus ) { 
astro.c:      pthread_mutex_lock(& suivi->mutex_azi );
astro.c:    if ( ! alt )  if ( suivi->pas_nord  || suivi->pas_sud || suivi->pas_acc_moins || suivi->pas_acc_plus ) { 
astro.c:      pthread_mutex_lock(& suivi->mutex_alt ); 
astro.c:     if ( suivi->pas_ouest || suivi->pas_est ) 
astro.c:       suivi->pas_azi += suivi->pas_ouest - suivi->pas_est  ; 
astro.c:     if ( suivi->pas_acc_plus)  suivi->pas_azi = (long) suivi->pas_azi * 1.5 ; 
astro.c:     if ( suivi->pas_acc_moins) suivi->pas_azi = (long) suivi->pas_azi / 1.5 ; 
astro.c:     if ( suivi->pas_nord || suivi->pas_sud)
astro.c:       suivi->pas_alt += suivi->pas_nord  - suivi->pas_sud ;
astro.c:     if ( suivi->pas_acc_plus)  suivi->pas_alt = (long) suivi->pas_alt * 1.5 ; 
astro.c:     if ( suivi->pas_acc_moins) suivi->pas_alt = (long) suivi->pas_alt / 1.5 ; 
astro.c:    suivi->pas_acc_plus  = 0 ;
astro.c:    suivi->pas_acc_moins = 0 ;
astro.c:    suivi->pas_est   = 0 ;
astro.c:    suivi->pas_ouest = 0 ; 
astro.c:    suivi->pas_nord  = 0 ;
astro.c:    suivi->pas_sud   = 0 ;
astro.c:    suivi->reset = 0 ;
astro.c:    if ( suivi->DONNEES_RAQUETTE   ) GPIO_KEYBOARD_RAQUETTE_READ( gpio_key_l, gpio_key_c, raquette, suivi) ;
astro.c:    if ( suivi->DONNEES_INFRAROUGE ) IR_KEYBOARD_RAQUETTE_READ( suivi) ;
astro.c:  if ( azi ) { pthread_mutex_unlock( & suivi->mutex_azi ); }
astro.c:  if ( alt ) { pthread_mutex_unlock( & suivi->mutex_alt ); }
astro.c:  suivi->t_diff     = (( t01.tv_sec - t00.tv_sec ) * GPIO_MICRO_SEC) + t01.tv_usec - t00.tv_usec ;
astro.c:  suivi->t_diff_sec = (double)suivi->t_diff / (double)GPIO_MICRO_SEC ;
astro.c:  if ( suivi->pas_azi_old != suivi->pas_azi ) suivi->d_appui_raq_azi += suivi->t_diff_sec ;
astro.c:  if ( suivi->pas_alt_old != suivi->pas_alt ) suivi->d_appui_raq_alt += suivi->t_diff_sec ;
astro.c:  if ( suivi->pas_azi_old != suivi->pas_azi || suivi->pas_alt_old != suivi->pas_alt ) {
astro.c:        astre->Va,astre->Vh,suivi->Ta,suivi->Th,suivi->Fa,suivi->Fh, \
astro.c:	(suivi->Ia - suivi->Ia_prec),(suivi->Ih - suivi->Ih_prec )) ;  
astro.c:   // La temporisation dans les boucles du thread SUIVI_MENU depend de  suivi->temporisation_menu
astro.c:  usleep( suivi->temporisation_menu ) ;
astro.c:  suivi->reset = 1 ;
astro.c:    usleep( suivi->temporisation_menu ) ;
astro.c:    if ( suivi->DONNEES_RAQUETTE )   GPIO_KEYBOARD_READ( gpio_key_l, gpio_key_c, keyboard, clavier) ;
astro.c:    if ( suivi->DONNEES_INFRAROUGE ) IR_KEYBOARD_READ( suivi, clavier) ;
astro.c:    TRACE1("suivi->menu=%d",suivi->menu) ;
astro.c:    switch( suivi->menu ) {
astro.c:        TRACE("changement de menu : %d : MENU_AZIMUTAL" , suivi->menu) ;
astro.c:        LOG("changement de menu : %d : MENU_AZIMUTAL" , suivi->menu) ;
astro.c:        TRACE("pas_azi = %ld pas_alt = %ld acc_azi = %f acc_alt = %f", suivi->pas_azi, suivi->pas_alt, suivi->acc_azi , suivi->acc_alt) ;
astro.c:        suivi->acc_alt          = 1 ;
astro.c:        suivi->SUIVI_EQUATORIAL = 0 ;
astro.c:        suivi->SUIVI_VOUTE      = 1 ;
astro.c:        suivi->menu_old         = suivi->menu ;
astro.c:        suivi->menu             = MENU_MANUEL_0 ; 
astro.c:        TRACE("changement de menu : %d : MENU_EQUATORIAL" , suivi->menu) ;
astro.c:        LOG("changement de menu : %d : MENU_EQUATORIAL" , suivi->menu) ;
astro.c:        TRACE("pas_azi = %ld pas_alt = %ld acc_azi = %f acc_alt = %f", suivi->pas_azi, suivi->pas_alt, suivi->acc_azi , suivi->acc_alt) ;
astro.c:        suivi->acc_alt          = 0 ;
astro.c:        suivi->SUIVI_EQUATORIAL = 1 ;
astro.c:        suivi->SUIVI_VOUTE      = 1 ;
astro.c:        suivi->menu_old = suivi->menu ;
astro.c:        suivi->menu = MENU_MANUEL_0 ;
astro.c:        if ( suivi->SUIVI_GOTO ) {
astro.c:        TRACE("changement de menu : %d : MENU_RESEAU_UP" , suivi->menu) ;
astro.c:        LOG("changement de menu : %d : MENU_RESEAU_UP" , suivi->menu) ;
astro.c:       suivi->menu = suivi->menu_old ;
astro.c:        TRACE("changement de menu : %d : MENU_RESEAU_DOWN" , suivi->menu) ;
astro.c:        LOG("changement de menu : %d : MENU_RESEAU_DOWN" , suivi->menu) ;
astro.c:       suivi->menu = suivi->menu_old ;
astro.c:        TRACE("changement de menu : %d : MENU_PROGRAMME_DOWN" , suivi->menu) ;
astro.c:        LOG("changement de menu : %d : MENU_PROGRAMME_DOWN" , suivi->menu) ;
astro.c:        TRACE("changement de menu : %d : MENU_DOWN" , suivi->menu) ;
astro.c:        LOG("changement de menu : %d : MENU_DOWN" , suivi->menu) ;
astro.c:  suivi->p_threads_id[ id_thread++ ] = pthread_self() ;
astro.c:  suivi->d_temps = 0 ;
astro.c:  TRACE("suivi->SUIVI_VOUTE=%d",suivi->SUIVI_VOUTE) ;
astro.c:    if ( suivi->SUIVI_VOUTE ) {
astro.c:      if ( suivi->SUIVI_ALIGNEMENT  ) {
astro.c:                astre->Va,astre->Vh,suivi->Ta,suivi->Th,suivi->Fa,suivi->Fh ) ;
astro.c:              astre->Va,astre->Vh,suivi->Ta,suivi->Th,suivi->Fa,suivi->Fh, \
astro.c:        (suivi->Ia - suivi->Ia_prec),(suivi->Ih - suivi->Ih_prec ),suivi->Tac, suivi->Thc) ;  */
astro.c:        suivi->SUIVI_ALIGNEMENT = 0 ;
astro.c:      suivi->d_temps += CALCUL_TEMPORISATION_VOUTE( voute, t00 ) ; 
astro.c:  // La temporisation dans la boucle du thread SUIVI_INFRAROUGE depend de suivi->temporisation_ir (en us)
astro.c:  suivi->p_threads_id[ id_thread++ ] = pthread_self() ;
astro.c:  if ( suivi->DONNEES_INFRAROUGE ) {
astro.c:  // La temporisation dans la boucle du thread SUIVI_CAPTEURS depend de suivi->temporisation_capteurs (en us)
astro.c:  suivi->p_threads_id[ id_thread++ ] = pthread_self() ;
astro.c:    if ( suivi->DONNEES_CAPTEURS ) {
astro.c:      if ( ! suivi->init_capteurs ) {
astro.c:          suivi->DONNEES_CAPTEURS = 0 ;
astro.c:          suivi->init_capteurs = 0 ;
astro.c:          suivi->init_capteurs = 1 ;
astro.c:      if ( suivi->init_capteurs ) {
astro.c:        suivi->roll    =  am->roll  ; 
astro.c:        suivi->pitch   =  am->pitch ;
astro.c:        suivi->heading =  am->heading ;
astro.c:    usleep( suivi->temporisation_capteurs );
astro.c:  memset( suivi->p_threads_id, 0 , MAX_THREADS) ;
astro.c:  if ( suivi->DONNEES_RAQUETTE ) GPIO_KEYBOARD_CONFIG( gpio_key_l, gpio_key_c ) ;
astro.c:  if ( suivi->alarme != 0 ) alarm( suivi->alarme) ;
astro.c:  TRACE("suivi->DONNEES_INFRAROUGE = %d",suivi->DONNEES_INFRAROUGE) ;
astro.c:  TRACE("suivi->DONNEES_CAPTEURS   = %d",suivi->DONNEES_CAPTEURS) ;
astro.c:  TRACE("suivi->DONNEES_RAQUETTE   = %d",suivi->DONNEES_RAQUETTE) ;
astro.c:  TRACE("suivi->DONNEES_BLUETOOTH  = %d",suivi->DONNEES_BLUETOOTH) ;
astro.c:  TRACE("MAIN avant THREADS = Ta=%2.6f Th=%2.6f Fa=%2.6f Fh=%2.6f\n",suivi->Ta,suivi->Th,suivi->Fa,suivi->Fh) ;
astro.c:  pthread_create( &suivi->p_suivi_calculs,   NULL, (void*)SUIVI_VOUTE,     suivi ) ;
astro.c:  pthread_create( &suivi->p_menu,            NULL, (void*)SUIVI_MENU,      suivi ) ;
astro.c:  if ( suivi->DONNEES_INFRAROUGE ) pthread_create( &suivi->p_suivi_infrarouge,NULL, (void*)SUIVI_INFRAROUGE, suivi ) ;
astro.c:  if ( suivi->DONNEES_CAPTEURS )   pthread_create( &suivi->p_suivi_capteurs,  NULL, (void*)SUIVI_CAPTEURS,  suivi ) ;
astro.c:  pthread_join( suivi->p_menu, NULL) ;
astro.c:  pthread_join( suivi->p_suivi_calculs, NULL) ;
astro.c:  if ( suivi->DONNEES_INFRAROUGE ) pthread_join( suivi->p_suivi_infrarouge, NULL) ;
astro.c:  if ( suivi->DONNEES_CAPTEURS )   pthread_join( suivi->p_suivi_capteurs, NULL) ;
calculs.c:  usleep ( (long)(suivi->DTh * suivi->pourcentage_tempo) ) ;
calculs.c:  while( t_diff < suivi->DTh ) {
calculs.c:  usleep ( (long)(suivi->DTa * suivi->pourcentage_tempo) ) ;
calculs.c:  while( t_diff < suivi->DTa ) {
calculs.c:  if ( suivi->SUIVI_EQUATORIAL == 1 ) {
calculs.c:  suivi->Da = AZI_F * 2.0 * PI / ( AZI_R * pow(2.0, AZI_N) * ( astre->Va / ( 60 * 60 * DEGRES ) )) ;
calculs.c:  suivi->Dh = ALT_F * 2.0 * PI / ( ALT_R * pow(2.0, ALT_N) * ( astre->Vh / ( 60 * 60 * DEGRES ) )) ;
calculs.c:  TRACE1("%f %f %f %f %f",suivi->acc_azi, voute->acc, AZI_R, astre->Va, azi_rot);
calculs.c:  TRACE1("%f %f %f %f %f",suivi->acc_alt, voute->acc, AZI_R, astre->Vh, alt_rot);
calculs.c:  if ( suivi->DONNEES_CONTROLEUR )  freq_azi     = suivi->acc_azi * voute->acc * AZI_R * astre->Va * azi_rot / DIV / PIPI ;
calculs.c:  else                              freq_azi     = suivi->acc_azi * voute->acc * AZI_R * astre->Va * azi_rot * AZI_R4 / DIV / PIPI / 4  ;
calculs.c:  if ( suivi->DONNEES_CONTROLEUR )  freq_alt     = suivi->acc_alt * voute->acc * ALT_R * astre->Vh * alt_rot / DIV / PIPI ;
calculs.c:  else                              freq_alt     = suivi->acc_alt * voute->acc * ALT_R * astre->Vh * alt_rot * ALT_R4 / DIV / PIPI / 4  ;
calculs.c:  pthread_mutex_lock(& suivi->mutex_azi );
calculs.c:    suivi->Sa_old = suivi->Sa ; 
calculs.c:    suivi->Sa     = (int)SGN(freq_azi)  ;
calculs.c:    suivi->Fa     = fabs(freq_azi )  ;
calculs.c:    suivi->Ta     = 1 / suivi->Fa ;
calculs.c:  pthread_mutex_unlock(& suivi->mutex_azi );
calculs.c:  pthread_mutex_lock(& suivi->mutex_alt );
calculs.c:    suivi->Sh_old = suivi->Sh ; 
calculs.c:    suivi->Sh     = (int)SGN(freq_alt) ;
calculs.c:    suivi->Fh     = fabs(freq_alt)  ;
calculs.c:    suivi->Th     = 1 / suivi->Fh ;
calculs.c:  pthread_mutex_unlock(& suivi->mutex_alt );
calculs.c:  if ( suivi->pas_azi !=  suivi->pas_azi_old ) {
calculs.c:    if ( suivi->pas_azi !=0 ) {
calculs.c:      //frequence = azi_rot * (double)suivi->pas_azi / suivi->d_appui_raq_azi ;
calculs.c:      frequence = azi_rot * (double)suivi->pas_azi ;
calculs.c:      pthread_mutex_lock(& suivi->mutex_azi );
calculs.c:        suivi->Sa_old = suivi->Sa ; 
calculs.c:        suivi->Sa     = (int)SGN(frequence)  ;
calculs.c:        suivi->Fa     = fabs(frequence) ;
calculs.c:        suivi->Ta     = 1 / suivi->Fa ;
calculs.c:      pthread_mutex_unlock(& suivi->mutex_azi );
calculs.c:      TRACE("Ta = %2.4f Th = %2.4f Fa = %2.4f Fh = %2.4f\n",suivi->Ta, suivi->Th, suivi->Fa, suivi->Fh) ;
calculs.c:  if ( suivi->pas_alt !=  suivi->pas_alt_old ) {
calculs.c:    if ( suivi->pas_alt !=0 ) {
calculs.c:      //frequence = alt_rot * (double)suivi->pas_alt / suivi->d_appui_raq_alt ;
calculs.c:      frequence = alt_rot * (double)suivi->pas_alt ;
calculs.c:      pthread_mutex_lock( & suivi->mutex_alt );
calculs.c:        suivi->Sh_old = suivi->Sh ; 
calculs.c:        suivi->Sh     = (int)SGN(frequence)  ;
calculs.c:        suivi->Fh     = fabs(frequence) ;
calculs.c:        suivi->Th     = 1 / suivi->Fh ;
calculs.c:      pthread_mutex_unlock( & suivi->mutex_alt );
calculs.c:      TRACE("Ta = %2.4f Th = %2.4f Fa = %2.4f Fh = %2.4f\n",suivi->Ta, suivi->Th, suivi->Fa, suivi->Fh) ;
calculs.c:      pthread_mutex_lock( & suivi->mutex_cal );
calculs.c:      pthread_mutex_unlock( & suivi->mutex_cal ) ;
calculs.c:      pthread_mutex_lock( & suivi->mutex_cal );
calculs.c:      pthread_mutex_unlock( & suivi->mutex_cal ) ;
calculs.c:  if ( suivi->DONNEES_CAPTEURS ) { 
calculs.c:    astre->a = suivi->pitch ;         // FIXME : donne azimut
calculs.c:    astre->h = suivi->heading ;       // FIXME : donne altitude 
config.c:  suivi->SUIVI_MANUEL     = 0 ;
config.c:  suivi->SUIVI_ALIGNEMENT = 0 ;
config.c:  suivi->SUIVI_GOTO       = 0 ;
config.c:  suivi->SUIVI_VOUTE      = 0 ;
config.c:  suivi->SUIVI_EQUATORIAL = 0 ;
config.c:  suivi->DONNEES_CAPTEURS    = DONNEES_CAPTEURS ;
config.c:  suivi->DONNEES_RAQUETTE    = DONNEES_RAQUETTE ;
config.c:  suivi->DONNEES_BLUETOOTH   = DONNEES_BLUETOOTH ;
config.c:  suivi->DONNEES_INFRAROUGE  = DONNEES_INFRAROUGE ;
config.c:  suivi->DONNEES_CONTROLEUR  = DONNEES_CONTROLEUR ;
config.c:  suivi->init_capteurs = 0 ; 
config.c:  suivi->reset = 0 ;
config.c:  suivi->pas_azi        = 1 ;
config.c:  suivi->pas_alt        = 1 ;
config.c:  suivi->pas_acc_plus   = 0 ;
config.c:  suivi->pas_acc_moins  = 0 ;
config.c:  suivi->pas_azi_old    = 0 ;
config.c:  suivi->pas_alt_old    = 0 ;
config.c:  suivi->pas_est        = 0 ;
config.c:  suivi->pas_ouest      = 0 ; 
config.c:  suivi->pas_nord       = 0 ;
config.c:  suivi->pas_sud        = 0 ;
config.c:  suivi->pas_forward    = 0 ;
config.c:  suivi->pas_rewind     = 0 ;
config.c:  suivi->pas_forward_fast   = 0 ;
config.c:  suivi->pas_rewind_fast  = 0 ;
config.c:  suivi->acc_azi   = 1.0 ;     // cette variable est utilisee dans le calcul des periodes
config.c:  suivi->acc_alt   = 1.0 ;     // cette variable est utilisee dans le calcul des periodes
config.c:  suivi->sgn_azi   = 1 ;
config.c:  suivi->sgn_alt   = 1 ;
config.c:  suivi->t_diff = 0 ;
config.c:  suivi->t_diff_sec = 0.0 ;
config.c:  suivi->d_temps          = 0.0 ;   
config.c:  suivi->d_appui_raq_azi  = 0.0 ;
config.c:  suivi->d_appui_raq_alt  = 0.0 ;
config.c:  suivi->Fa        = 30 ;
config.c:  suivi->Fh        = 30 ;
config.c:  suivi->Ta        = 1/suivi->Fa ;
config.c:  suivi->Th        = 1/suivi->Fh ;
config.c:  suivi->Tac        = 1.0 ;
config.c:  suivi->Thc        = 1.0 ;
config.c:  suivi->Tacc = 0.97 ;
config.c:  suivi->Thcc = 0.97 ;
config.c:  suivi->Ia = 0 ;
config.c:  suivi->Ih = 0 ;
config.c:  suivi->Ias = 0 ;
config.c:  suivi->Ihs = 0 ;
config.c:  suivi->Ia_prec = 0 ;
config.c:  suivi->Ih_prec = 0 ;
config.c:  for(i=0;i<CONFIG_ASS;i++) suivi->Iat[i] = 0 ;
config.c:  for(i=0;i<CONFIG_ASS;i++) suivi->Iht[i] = 0 ;
config.c:  //suivi->plus      =  1.02 ;
config.c:  //suivi->moins     =  1.0 / suivi->plus ;   
config.c:  suivi->l_NANO_MOINS     = 0.0  ;     // a retirer sur les temporisations pour les tests
config.c:  suivi->pas_asc = 0 ;
config.c:  suivi->pas_dec = 0  ;
config.c:  suivi->Sa = 0 ;       // signe de la vitesse (direction), tenir compte du flag FLAG_SENS_ALT
config.c:  suivi->Sh = 0 ;       // signe de la vitesse (direction), tenir compte du flag FLAG_SENS_AZI
config.c:  suivi->Sa_old = 0 ;   // flag de comparaison pour raffraichir ou non les ecritures
config.c:  suivi->Sh_old = 0 ;   // flag de comparaison pour raffraichir ou non les ecritures
config.c:  suivi->Da = 0  ;      // nombre a injecter dans les diviseurs de frequence
config.c:  suivi->Dh = 0 ;       // nombre a injecter dans les diviseurs de frequence
config.c:  suivi->menu = MENU_PAR_DEFAUT  ;    // menu par defaut
config.c:  suivi->menu_old = MENU_PAR_DEFAUT  ;
config.c:  suivi->alarme = 0 ;
config.c:  suivi->pourcentage_tempo = 0.99 ; 
config.c:  suivi->temporisation_menu     = TEMPO_MENU ;
config.c:  suivi->temporisation_raq      = TEMPO_RAQ ;
config.c:  suivi->temporisation_ir       = TEMPO_IR ;  
config.c:  suivi->temporisation_clavier  = TEMPO_CLAVIER ; 
config.c:  suivi->temporisation_capteurs = TEMPO_CAPTEURS ;
config.c:  suivi->DTh = suivi->Th * CONFIG_MICRO_SEC ;
config.c:  suivi->DTa = suivi->Ta * CONFIG_MICRO_SEC ;
config.c:  pthread_mutex_init( & suivi->mutex_alt, NULL ) ;
config.c:  pthread_mutex_init( & suivi->mutex_azi, NULL ) ;
config.c:  pthread_mutex_init( & suivi->mutex_cal, NULL ) ;
gpio.c:    if ( ! strcmp( raquette[i][j], "plus" ) ) {  suivi->pas_acc_plus =1 ; }
gpio.c:    if ( ! strcmp( raquette[i][j], "moins" ) ) { suivi->pas_acc_moins=1 ; }
gpio.c:    if ( ! strcmp( raquette[i][j], "ne" ) ) { suivi->pas_nord=1 ; suivi->pas_est=1   ; }
gpio.c:    if ( ! strcmp( raquette[i][j], "no" ) ) { suivi->pas_nord=1 ; suivi->pas_ouest=1 ; }
gpio.c:    if ( ! strcmp( raquette[i][j], "se" ) ) { suivi->pas_sud=1  ; suivi->pas_est=1   ; }
gpio.c:    if ( ! strcmp( raquette[i][j], "so" ) ) { suivi->pas_sud=1  ; suivi->pas_ouest=1 ; }
gpio.c:    if ( ! strcmp( raquette[i][j], "n" ) ) { suivi->pas_nord  = 1 ; }
gpio.c:    if ( ! strcmp( raquette[i][j], "o" ) ) { suivi->pas_ouest = 1 ; }
gpio.c:    if ( ! strcmp( raquette[i][j], "e" ) ) { suivi->pas_est   = 1 ; }
gpio.c:    if ( ! strcmp( raquette[i][j], "s" ) ) { suivi->pas_sud   = 1 ; }
gpio.c:    if ( ! strcmp( raquette[i][j], "reset" ) ) { suivi->reset   = 1 ; }
gpio.c:  //printf("%ld %ld %ld %ld\n", suivi->pas_ouest, suivi->pas_est, suivi->pas_nord, suivi->pas_sud);
gpio.c:          pthread_mutex_lock( & pm->suivi->mutex_alt ) ;
gpio.c:            deltat = pm->suivi->Th   ;
gpio.c:            sens   = pm->suivi->Sh ;
gpio.c:          pthread_mutex_unlock( & pm->suivi->mutex_alt ) ;
gpio.c:            pthread_mutex_lock( & pm->suivi->mutex_azi ) ;
gpio.c:            deltat = pm->suivi->Ta   ; 
gpio.c:            sens = pm->suivi->Sa ;
gpio.c:          pthread_mutex_unlock( & pm->suivi->mutex_azi ) ;
gpio.c:  pm0->suivi->Th = 1 / (Fm1*upas) ;
gpio.c:  if(nbm)pm1->suivi->Ta = 1 / (Fm2*upas) ;
ir.c:    memset( suivi->datas_infrarouge, '\0', strlen( suivi->datas_infrarouge ) ) ;
ir.c:    if ( k == 0 && i < IR_NB_CODES ) strcpy( suivi->datas_infrarouge, irc->code[i] ) ;
ir.c:         strcpy( suivi->datas_infrarouge, irc->code[i] ) ;
ir.c:    // suivi->datas_infrarouge fonctionne comme un TAMPON
ir.c:    TRACE1("suivi->datas_infrarouge = %s", suivi->datas_infrarouge ) ;
ir.c:    TRACE1("suivi->temporisation_ir = %ld", suivi->temporisation_ir ) ;
ir.c:    usleep( suivi->temporisation_ir ) ;
ir.c:    memset( suivi->datas_infrarouge, 0, strlen( suivi->datas_infrarouge ) ) ;
ir.c:    strcpy( suivi->datas_infrarouge, "") ;
ir.c:  strcpy( val, suivi->datas_infrarouge ) ;
ir.c:  if ( ! strcmp( suivi->datas_infrarouge, "plus" ) )     { suivi->pas_acc_plus  = 1 ; }
ir.c:  if ( ! strcmp( suivi->datas_infrarouge, "moins" ) )    { suivi->pas_acc_moins = 1 ; }
ir.c:  if ( ! strcmp( suivi->datas_infrarouge, "forward" ) )  { suivi->pas_forward  = 1 ; }
ir.c:  if ( ! strcmp( suivi->datas_infrarouge, "rewind" ) )   { suivi->pas_rewind = 1 ; }
ir.c:  if ( ! strcmp( suivi->datas_infrarouge, "forwardfast" ) )  { suivi->pas_forward_fast  = 1 ; }
ir.c:  if ( ! strcmp( suivi->datas_infrarouge, "rewindfast" ) )   { suivi->pas_rewind_fast = 1 ; }
ir.c:  if ( ! strcmp( suivi->datas_infrarouge, "ne" ) )       { suivi->pas_nord=1 ; suivi->pas_est=1   ; }
ir.c:  if ( ! strcmp( suivi->datas_infrarouge, "no" ) )       { suivi->pas_nord=1 ; suivi->pas_ouest=1 ; }
ir.c:  if ( ! strcmp( suivi->datas_infrarouge, "se" ) )       { suivi->pas_sud=1  ; suivi->pas_est=1   ; }
ir.c:  if ( ! strcmp( suivi->datas_infrarouge, "so" ) )       { suivi->pas_sud=1  ; suivi->pas_ouest=1 ; }
ir.c:  if ( ! strcmp( suivi->datas_infrarouge, "n" ) )        { suivi->pas_nord  = 1 ; }
ir.c:  if ( ! strcmp( suivi->datas_infrarouge, "o" ) )        { suivi->pas_ouest = 1 ; }
ir.c:  if ( ! strcmp( suivi->datas_infrarouge, "e" ) )        { suivi->pas_est   = 1 ; }
ir.c:  if ( ! strcmp( suivi->datas_infrarouge, "s" ) )        { suivi->pas_sud   = 1 ; }
ir.c:  if ( ! strcmp( suivi->datas_infrarouge, "reset" ) )    { suivi->reset   = 1 ; }
ir.c:  TRACE1("%ld %ld %ld %ld %d %d\n", suivi->pas_ouest, suivi->pas_est, suivi->pas_nord, suivi->pas_sud, suivi->pas_acc_plus, suivi->pas_acc_moins );
ir.c:  if ( ! strcmp( suivi->datas_infrarouge, "plus" ) )  {
ir.c:    suivi->Ta *=  suivi->plus  ; suivi->Fa = 1 / suivi->Ta ;
ir.c:    suivi->Th *=  suivi->plus  ; suivi->Fh = 1 / suivi->Th ;
ir.c:  if ( ! strcmp( suivi->datas_infrarouge, "moins" ) ) {
ir.c:    suivi->Ta *=  suivi->moins  ; suivi->Fa = 1 / suivi->Ta ;
ir.c:    suivi->Th *=  suivi->moins  ; suivi->Fh = 1 / suivi->Th ;
ir.c:  suivi->temporisation_ir = 10000 ;
stat.c:	suivi->Ias=0 ;
stat.c:	for(i=0;i<CONFIG_ASS;i++) suivi->Ias += suivi->Iat[i] ;
stat.c:	suivi->Ias = suivi->Ias / CONFIG_ASS ;
stat.c:	// if ( incr > CONFIG_ASS )   suivi->Tac = suivi->Tacc * suivi->Ias / suivi->Fa   ;
stat.c:	if ( incr > CONFIG_ASS )   suivi->Tac = suivi->Tacc ;
stat.c:	//suivi->Tac = pow(suivi->Tac, 1.02) ;
stat.c:	for(i=0;i<(CONFIG_ASS-1);i++) suivi->Iat[i] = suivi->Iat[i+1] ;  
stat.c:	suivi->Iat[CONFIG_ASS-1] = suivi->Ia - suivi->Ia_prec   ;
stat.c:  suivi->Ia_prec = suivi->Ia ;
stat.c:	suivi->Ihs=0 ;
stat.c:	for(i=0;i<CONFIG_ASS;i++) suivi->Ihs += suivi->Iht[i] ;
stat.c:	suivi->Ihs = suivi->Ihs / CONFIG_ASS ;
stat.c:	// if ( incr > CONFIG_ASS )   suivi->Thc = suivi->Thcc * suivi->Ihs / suivi->Fh ;
stat.c:	if ( incr > CONFIG_ASS )   suivi->Thc = suivi->Thcc ;
stat.c:	//suivi->Thc = pow(suivi->Thc, 1.02) ;
stat.c:	for(i=0;i<(CONFIG_ASS-1);i++) suivi->Iht[i] = suivi->Iht[i+1] ;  
stat.c:	suivi->Iht[CONFIG_ASS-1] = suivi->Ih - suivi->Ih_prec ;
stat.c:  suivi->Ih_prec = suivi->Ih ;
